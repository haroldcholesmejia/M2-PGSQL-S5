-- PROCEDIMIENTOS ALMACENADOS
-- HAROLD CHOLES MEJIA

--1. CREARUNA NUEVA CUENTA BANCARIA
CREATE OR REPLACE PROCEDURE CREAR_CUENTA_BANCARIA(
    P_CLIENTE_ID INTEGER,
    P_NUMERO_CUENTA VARCHAR(100),
    P_TIPO_CUENTA VARCHAR(20),
    P_SALDO MONEY,
    P_FECHA_APERTURA TIMESTAMP,
    P_ESTADO VARCHAR(20)
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    -- VERIFICAR SI EL CLIENTE EXISTE
    IF NOT EXISTS (
        SELECT 1 FROM CLIENTES WHERE CLIENTE_ID = P_CLIENTE_ID
    ) THEN
        RAISE EXCEPTION 'EL CLIENTE CON ID % NO EXISTE.', P_CLIENTE_ID;
    END IF;

    -- VERIFICAR SI EL NÚMERO DE CUENTA YA EXISTE
    IF EXISTS (
        SELECT 1 FROM CUENTAS_BANCARIAS
        WHERE NUMERO_CUENTA = P_NUMERO_CUENTA
        AND TIPO_CUENTA = P_TIPO_CUENTA
    ) THEN
        RAISE EXCEPTION 'LA CUENTA CON NÚMERO % Y TIPO % YA EXISTE.', P_NUMERO_CUENTA, P_TIPO_CUENTA;
    END IF;

    -- INTENTAR INSERTAR LA NUEVA CUENTA BANCARIA
    BEGIN
        INSERT INTO CUENTAS_BANCARIAS (CLIENTE_ID, NUMERO_CUENTA, TIPO_CUENTA, SALDO, FECHA_APERTURA, ESTADO)
        VALUES (P_CLIENTE_ID, P_NUMERO_CUENTA, P_TIPO_CUENTA, P_SALDO, P_FECHA_APERTURA, P_ESTADO);
    EXCEPTION
        WHEN FOREIGN_KEY_VIOLATION THEN
            RAISE EXCEPTION 'ERROR DE CLAVE FORÁNEA: LA CUENTA NO PUDO SER CREADA DEBIDO A UN PROBLEMA CON LAS CLAVES FORÁNEAS.';
        WHEN UNIQUE_VIOLATION THEN
            RAISE EXCEPTION 'ERROR DE UNICIDAD: EL NÚMERO DE CUENTA YA ESTÁ EN USO.';
        WHEN OTHERS THEN
            RAISE EXCEPTION 'SE PRODUJO UN ERROR INESPERADO: %', SQLERRM;
    END;
END;
$$;

CALL crear_cuenta_bancaria('1', '434545', 'corriente','70000000', '2024-01-01','inactiva');

--2. ACTUALIZAR LA INFORMACION DEL CLIENTE
CREATE OR REPLACE PROCEDURE ACTUALIZAR_CLIENTE(
    P_CLIENTE_ID INTEGER,
    P_NOMBRE VARCHAR(50),
    P_APELLIDO VARCHAR(50),
    P_DIRECCION VARCHAR(200),
    P_TELEFONO VARCHAR(100),
    P_CORREO_ELECTRONICO VARCHAR(200),
    P_FECHA_NACIMIENTO DATE,
    P_ESTADO VARCHAR(200)
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    -- VERIFICAR SI EL CLIENTE EXISTE
    IF NOT EXISTS (
        SELECT 1 FROM CLIENTES WHERE CLIENTE_ID = P_CLIENTE_ID
    ) THEN
        RAISE EXCEPTION 'EL CLIENTE CON ID % NO EXISTE.', P_CLIENTE_ID;
    END IF;

    -- INTENTAR ACTUALIZAR LA INFORMACIÓN DEL CLIENTE
    BEGIN
        UPDATE CLIENTES
        SET
            NOMBRE = COALESCE(P_NOMBRE, NOMBRE),
            APELLIDO = COALESCE(P_APELLIDO, APELLIDO),
            DIRECCION = COALESCE(P_DIRECCION, DIRECCION),
            TELEFONO = COALESCE(P_TELEFONO, TELEFONO),
            CORREO_ELECTRONICO = COALESCE(P_CORREO_ELECTRONICO, CORREO_ELECTRONICO),
            FECHA_NACIMIENTO = COALESCE(P_FECHA_NACIMIENTO, FECHA_NACIMIENTO),
            ESTADO = COALESCE(P_ESTADO, ESTADO)
        WHERE CLIENTE_ID = P_CLIENTE_ID;
    EXCEPTION
        WHEN UNIQUE_VIOLATION THEN
            RAISE EXCEPTION 'ERROR DE UNICIDAD: EL CORREO ELECTRÓNICO % YA ESTÁ EN USO.', P_CORREO_ELECTRONICO;
        WHEN OTHERS THEN
            RAISE EXCEPTION 'SE PRODUJO UN ERROR INESPERADO: %', SQLERRM;
    END;
END;
$$;

CALL ACTUALIZAR_CLIENTE(1, 'HAROLD', 'Pérez', 'Calle 123', '1234567890', 'juan.perez@example.com', '1980-01-01', 'activo');

--3. ELIMINAR UNA CUENTA BANCARIA
CREATE OR REPLACE PROCEDURE ELIMINAR_CUENTA(
    P_CLIENTE_ID INTEGER,
    P_NUMERO_CUENTA VARCHAR(100),
    P_TIPO_CUENTA VARCHAR(20)
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    -- VERIFICAR SI LA CUENTA EXISTE
    IF NOT EXISTS (
        SELECT 1 FROM CUENTAS_BANCARIAS
        WHERE CLIENTE_ID = P_CLIENTE_ID
        AND NUMERO_CUENTA = P_NUMERO_CUENTA
        AND TIPO_CUENTA = P_TIPO_CUENTA
    ) THEN
        RAISE EXCEPTION 'LA CUENTA CON NÚMERO % Y TIPO % NO EXISTE PARA EL CLIENTE CON ID %. NO SE PUEDE ELIMINAR.', P_NUMERO_CUENTA, P_TIPO_CUENTA, P_CLIENTE_ID;
    END IF;

    -- INTENTAR ELIMINAR LA CUENTA BANCARIA
    BEGIN
        DELETE FROM CUENTAS_BANCARIAS
        WHERE CLIENTE_ID = P_CLIENTE_ID
        AND NUMERO_CUENTA = P_NUMERO_CUENTA
        AND TIPO_CUENTA = P_TIPO_CUENTA;
    EXCEPTION
        WHEN FOREIGN_KEY_VIOLATION THEN
            RAISE EXCEPTION 'ERROR DE CLAVE FORÁNEA: NO SE PUDO ELIMINAR LA CUENTA DEBIDO A UN PROBLEMA CON LAS CLAVES FORÁNEAS.';
        WHEN OTHERS THEN
            RAISE EXCEPTION 'SE PRODUJO UN ERROR INESPERADO: %', SQLERRM;
    END;
END;
$$;


CALL ELIMINAR_CUENTA(1, '434545', 'corriente');


--4. TRANSFERIR FONDOS ENTRE CUENTAS
CREATE OR REPLACE PROCEDURE TRANSFERIR_FONDOS(
    P_CLIENTE_ID INTEGER,
    P_NUMERO_CUENTA_ORIGEN VARCHAR(100),
    P_TIPO_CUENTA_ORIGEN VARCHAR(20),
    P_NUMERO_CUENTA_DESTINO VARCHAR(100),
    P_TIPO_CUENTA_DESTINO VARCHAR(20),
    P_MONTO MONEY
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    -- VERIFICAR SI LAS CUENTAS EXISTEN
    IF NOT EXISTS (
        SELECT 1 FROM CUENTAS_BANCARIAS
        WHERE CLIENTE_ID = P_CLIENTE_ID
        AND NUMERO_CUENTA = P_NUMERO_CUENTA_ORIGEN
        AND TIPO_CUENTA = P_TIPO_CUENTA_ORIGEN
    ) THEN
        RAISE EXCEPTION 'LA CUENTA DE ORIGEN CON NÚMERO % Y TIPO % NO EXISTE PARA EL CLIENTE CON ID %. NO SE PUEDE TRANSFERIR.', P_NUMERO_CUENTA_ORIGEN, P_TIPO_CUENTA_ORIGEN, P_CLIENTE_ID;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM CUENTAS_BANCARIAS
        WHERE CLIENTE_ID = P_CLIENTE_ID
        AND NUMERO_CUENTA = P_NUMERO_CUENTA_DESTINO
        AND TIPO_CUENTA = P_TIPO_CUENTA_DESTINO
    ) THEN
        RAISE EXCEPTION 'LA CUENTA DE DESTINO CON NÚMERO % Y TIPO % NO EXISTE PARA EL CLIENTE CON ID %. NO SE PUEDE TRANSFERIR.', P_NUMERO_CUENTA_DESTINO, P_TIPO_CUENTA_DESTINO, P_CLIENTE_ID;
    END IF;

    -- VERIFICAR SI EL SALDO DE LA CUENTA DE ORIGEN ES SUFICIENTE
    IF (SELECT SALDO FROM CUENTAS_BANCARIAS
        WHERE CLIENTE_ID = P_CLIENTE_ID
        AND NUMERO_CUENTA = P_NUMERO_CUENTA_ORIGEN
        AND TIPO_CUENTA = P_TIPO_CUENTA_ORIGEN) < P_MONTO THEN
        RAISE EXCEPTION 'SALDO INSUFICIENTE EN LA CUENTA DE ORIGEN.';
    END IF;

    -- INTENTAR REALIZAR LA TRANSFERENCIA
    BEGIN
        -- DEBITAR EL MONTO DE LA CUENTA DE ORIGEN
        UPDATE CUENTAS_BANCARIAS
        SET SALDO = SALDO - P_MONTO
        WHERE CLIENTE_ID = P_CLIENTE_ID
        AND NUMERO_CUENTA = P_NUMERO_CUENTA_ORIGEN
        AND TIPO_CUENTA = P_TIPO_CUENTA_ORIGEN;

        -- ACREDITAR EL MONTO EN LA CUENTA DE DESTINO
        UPDATE CUENTAS_BANCARIAS
        SET SALDO = SALDO + P_MONTO
        WHERE CLIENTE_ID = P_CLIENTE_ID
        AND NUMERO_CUENTA = P_NUMERO_CUENTA_DESTINO
        AND TIPO_CUENTA = P_TIPO_CUENTA_DESTINO;
    EXCEPTION
        WHEN FOREIGN_KEY_VIOLATION THEN
            RAISE EXCEPTION 'ERROR DE CLAVE FORÁNEA: NO SE PUDO REALIZAR LA TRANSFERENCIA DEBIDO A UN PROBLEMA CON LAS CLAVES FORÁNEAS.';
        WHEN OTHERS THEN
            RAISE EXCEPTION 'SE PRODUJO UN ERROR INESPERADO: %', SQLERRM;
    END;
END;
$$;


CALL TRANSFERIR_FONDOS(1, '233435454', 'corriente', '434545', 'corriente', '500.00');

-- 5. AGREGAR UNA NUEVA TRANSACCION
CREATE OR REPLACE PROCEDURE AGREGAR_TRANSACCION(
    P_CUENTA_ID INTEGER,
    P_TIPO_TRANSACCION VARCHAR(20),
    P_MONTO_TRANS MONEY,
    P_FECHA_TRANSACCION TIMESTAMP,
    P_DESCRIPCION VARCHAR(1000)
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    -- VERIFICAR SI LA CUENTA EXISTE
    IF NOT EXISTS (
        SELECT 1 FROM CUENTAS_BANCARIAS WHERE CUENTA_ID = P_CUENTA_ID
    ) THEN
        RAISE EXCEPTION 'LA CUENTA CON ID % NO EXISTE. NO SE PUEDE AGREGAR LA TRANSACCIÓN.', P_CUENTA_ID;
    END IF;

    -- INTENTAR INSERTAR LA NUEVA TRANSACCIÓN
    BEGIN
        INSERT INTO TRANSACCIONES (CUENTA_ID, TIPO_TRANSACCION, MONTO_TRANS, FECHA_TRANSACCION, DESCRIPCION)
        VALUES (P_CUENTA_ID, P_TIPO_TRANSACCION, P_MONTO_TRANS, P_FECHA_TRANSACCION, P_DESCRIPCION);
    EXCEPTION
        WHEN FOREIGN_KEY_VIOLATION THEN
            RAISE EXCEPTION 'ERROR DE CLAVE FORÁNEA: NO SE PUDO AGREGAR LA TRANSACCIÓN DEBIDO A UN PROBLEMA CON LAS CLAVES FORÁNEAS.';
        WHEN CHECK_VIOLATION THEN
            RAISE EXCEPTION 'ERROR DE RESTRICCIÓN: EL TIPO DE TRANSACCIÓN % NO ES VÁLIDO. DEBE SER "DEPOSITO", "RETIRO" O "TRANSFERENCIA".', P_TIPO_TRANSACCION;
        WHEN OTHERS THEN
            RAISE EXCEPTION 'SE PRODUJO UN ERROR INESPERADO: %', SQLERRM;
    END;
END;
$$;


CALL AGREGAR_TRANSACCION(4, 'deposito', '1000.00', '2024-05-01', 'Depósito inicial');

--6. CALCULAR EL SALDO TOTAL DE TODAS LAS CUENTAS DE UN CLIENTE
CREATE OR REPLACE FUNCTION CALCULAR_SALDO_TOTAL_CLIENTE(
    P_CLIENTE_ID INTEGER
)
RETURNS MONEY AS $$
DECLARE
    SALDO_TOTAL NUMERIC; -- USAR NUMERIC PARA REALIZAR LA SUMA
BEGIN
    -- VERIFICAR SI EL CLIENTE EXISTE
    IF NOT EXISTS (
        SELECT 1 FROM CUENTAS_BANCARIAS WHERE CLIENTE_ID = P_CLIENTE_ID
    ) THEN
        RAISE EXCEPTION 'EL CLIENTE CON ID % NO TIENE CUENTAS ASOCIADAS.', P_CLIENTE_ID;
    END IF;

    -- INTENTAR CALCULAR EL SALDO TOTAL
    BEGIN
        SELECT COALESCE(SUM(SALDO::NUMERIC), 0)
        INTO SALDO_TOTAL
        FROM CUENTAS_BANCARIAS
        WHERE CLIENTE_ID = P_CLIENTE_ID;

        -- CONVERTIR EL RESULTADO DE NUEVO A MONEY Y DEVOLVERLO
        RETURN SALDO_TOTAL::MONEY;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE EXCEPTION 'SE PRODUJO UN ERROR INESPERADO AL CALCULAR EL SALDO TOTAL: %', SQLERRM;
    END;
END;
$$ LANGUAGE PLPGSQL;


SELECT CALCULAR_SALDO_TOTAL_CLIENTE(1);


--7. GENERAR UN REPORTE DE TRANSACCIONES PARA UN RANGO DE FECHAS
CREATE OR REPLACE FUNCTION GENERAR_REPORTE_TRANSACCIONES(
    P_FECHA_INICIO TIMESTAMP,
    P_FECHA_FIN TIMESTAMP
)
RETURNS TABLE (
    TRANSACCION_ID INTEGER,
    CUENTA_ID INTEGER,
    TIPO_TRANSACCION VARCHAR(20),
    MONTO_TRANS MONEY,
    FECHA_TRANSACCION TIMESTAMP,
    DESCRIPCION VARCHAR(1000)
) AS $$
BEGIN
    -- VERIFICAR SI LA FECHA DE INICIO ES ANTERIOR A LA FECHA DE FIN
    IF P_FECHA_INICIO > P_FECHA_FIN THEN
        RAISE EXCEPTION 'LA FECHA DE INICIO (%S) NO PUEDE SER POSTERIOR A LA FECHA DE FIN (%S).', P_FECHA_INICIO, P_FECHA_FIN;
    END IF;

    -- INTENTAR GENERAR EL REPORTE
    BEGIN
        RETURN QUERY
        SELECT T.TRANSACCION_ID, T.CUENTA_ID, T.TIPO_TRANSACCION, T.MONTO_TRANS, T.FECHA_TRANSACCION, T.DESCRIPCION
        FROM TRANSACCIONES T
        WHERE T.FECHA_TRANSACCION BETWEEN P_FECHA_INICIO AND P_FECHA_FIN
        ORDER BY T.FECHA_TRANSACCION;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE EXCEPTION 'SE PRODUJO UN ERROR INESPERADO AL GENERAR EL REPORTE: %', SQLERRM;
    END;
END;
$$ LANGUAGE PLPGSQL;


SELECT * FROM GENERAR_REPORTE_TRANSACCIONES('2024-01-01', '2024-08-31');
